// java security policy file for the remote-code-execution-sample
// Â© 2023 iamfortress.net
// The sample program's permissions:
grant codeBase "file:${user.home}/Development/remote-code-execution-sample/-" {

  // must specifically allow file to execute:
  permission java.io.FilePermission "./src/main/resources/hacker-script.sh", "execute";

  // if runtime calls uname fully qualified:
  permission java.io.FilePermission "/bin/uname", "execute";

  // if runtime called without a fully qualified path:
  //permission java.io.FilePermission "<<ALL FILES>>", "execute";

  // Serializing to file req's write access:
  permission java.io.FilePermission "myObject.ser", "write";

  // Deserializing from file req's read access:
  permission java.io.FilePermission "myObject.ser", "read";

  // to read the file location:
  permission java.util.PropertyPermission "remote-code-execution-sh", "read";
  permission java.util.PropertyPermission "user.home", "read";
};

// Optionally, If running from an IDE, gets configured something like this...
grant codeBase "file:${user.home}/JavaTools/idea-IC-139.659.2/lib/idea_rt.jar" {
  permission java.util.PropertyPermission "*", "read";
  permission java.lang.RuntimePermission "*";
  permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
  permission java.io.FilePermission "myObject.ser", "write";
  permission java.io.FilePermission "myObject.ser", "read";
  permission java.net.SocketPermission "localhost:*", "listen,resolve";
  permission java.io.FilePermission "<<ALL FILES>>", "execute";
};

// default permissions granted to all domains
grant {
  // Allows any thread to stop itself using the java.lang.Thread.stop()
  // method that takes no argument.
  // Note that this permission is granted by default only to remain
  // backwards compatible.
  // It is strongly recommended that you either remove this permission
  // from this policy file or further restrict it to code sources
  // that you specify, because Thread.stop() is potentially unsafe.
  // See the API specification of java.lang.Thread.stop() for more
  // information.
  permission java.lang.RuntimePermission "stopThread";

  // allows anyone to listen on dynamic ports
  permission java.net.SocketPermission "localhost:0", "listen";

  // "standard" properies that can be read by anyone
  permission java.util.PropertyPermission "java.version", "read";
  permission java.util.PropertyPermission "java.vendor", "read";
  permission java.util.PropertyPermission "java.vendor.url", "read";
  permission java.util.PropertyPermission "java.class.version", "read";
  permission java.util.PropertyPermission "os.name", "read";
  permission java.util.PropertyPermission "os.version", "read";
  permission java.util.PropertyPermission "os.arch", "read";
  permission java.util.PropertyPermission "file.separator", "read";
  permission java.util.PropertyPermission "path.separator", "read";
  permission java.util.PropertyPermission "line.separator", "read";

  permission java.util.PropertyPermission "java.specification.version", "read";
  permission java.util.PropertyPermission "java.specification.vendor", "read";
  permission java.util.PropertyPermission "java.specification.name", "read";

  permission java.util.PropertyPermission "java.vm.specification.version", "read";
  permission java.util.PropertyPermission "java.vm.specification.vendor", "read";
  permission java.util.PropertyPermission "java.vm.specification.name", "read";
  permission java.util.PropertyPermission "java.vm.version", "read";
  permission java.util.PropertyPermission "java.vm.vendor", "read";
  permission java.util.PropertyPermission "java.vm.name", "read";
};
